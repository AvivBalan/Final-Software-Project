/*
 * main.cpp

 *
 *  Created on: 5 ◊ë◊°◊§◊ò 2016
 *      Author: ◊†◊í◊î
 */

#include <cstdlib> //include c library
extern "C"{
//include your own C source files
#include "SPPoint.h"
#include "SPLogger.h"
}
int main(char * args){
//Make sure that the logger was set at the beginning of the main function


//start

// COMMAND LINE ARGUMENT with the Error messages
	char * configFilename;
	if (args == NULL){
		configFilename = "spcbir.config";
	}
	else{
		configFilename = args;
	}
	//‚ÄúInvalid command line : use -c <config_filename>‚Äù - check

//init from config
	SP_CONFIG_MSG spConfigMsg;
	SPConfig configFile = spConfigCreate(configFilename,spConfigMsg);
	if (spConfigMsg == SP_CONFIG_CANNOT_OPEN_FILE){
		if (configFilename == "spcbir.config" ){
			//‚ÄúThe default configuration file spcbir.config couldn‚Äôt be open‚Äù +new line + exit?
		}
		else{
			//#2 ‚ÄúThe configuration file <filename> couldn‚Äôt be open‚Äù + new line +exit?
		}
	}


// extract mode?
	if (spConfigIsExtractionMode(configFile,spConfigMsg)){
		// yes:

		//extract features

		// done?

		// no: repeat

		// yes: save to directory

	}
	else{
		//no:

		//	extract from file
	}

// init data structures

// recive command

// query?
	char queryImgPath[1024];
    printf("Please enter an image path:\n");
    scanf("%s", queryImgPath);

// no: exit
if (queryImgPath== '<>'){
	//exit
}
int NumOfImages = spConfigGetNumOfImages(configFile,spConfigMsg);
int spKNN = spConfigGetspKNN(configFile,spConfigMsg);
int NumOfFeatures =  spConfigGetNumOfFeatures(configFile,spConfigMsg);
int * imgArray = (int*)malloc (sizeof(int)*configFile,spConfigMsg);
int NumOfSimilarImages=spConfigGetNumOfSimilarImages(configFile,spConfigMsg);
int * SimilarImagesArr = (int*)malloc (NumOfSimilarImages*sizeof(int));
int i=0;
for (i=0;i<NumOfSimilarImages;i++){
	SimilarImagesArr[i]=0;
}
i=0;
for (i=0; i<NumOfImages;i++){
	imgArray[i]=0;
}
i=0;
SPPoint * queryFeatures = (SPPoint*) malloc (NumOfFeatures*sizeof (SPPoint));
queryFeatures = getImageFeatures(queryImgPath,int index,int* numOfFeats);
for (i=0;i<NumOfFeatures;i++){
	spKNNSearch( tree,  queryFeatures[i],  spKNN, imgArray);
}
i=0;
int max=0;
int j=0;
for (i=0;i<NumOfSimilarImages;i++){
	for (j=0;j<NumOfFeatures;j++){
		if (imgArray[j]>imgArray[max]){
			max = j;
		}
	}
	SimilarImagesArr[i]= max;
	imgArray[max] =-1;
}
i=0;
for (i=0;i<NumOfSimilarImages;i++){

}



};
// yes: find similar images
/*
 * In the final project, we will search for the spNumOfSimilarImages most similar images (notice that spNumOfSimilarImages in Assignment no. 2 was 5) as follow:
1. We will store all features in a special data-structure called KD-TREE (refer to the lecture slides for more information). The construction time of the KD-TREE should be in ùëÇ(ùëë√óùëõùëôùëúùëî(ùëõ)) where ùëë=ùë†ùëùùëÉùê∂ùê¥ùê∑ùëñùëöùëíùëõùë†ùëñùëúùëõ and ùëõ=ùë°‚Ñéùëí ùë°ùëúùë°ùëéùëô ùëõùë¢ùëöùëèùëíùëü ùëúùëì ùëìùëíùëéùë°ùë¢ùëüùëíùë† ùëìùëúùëü ùëéùëôùëô ùëñùëöùëéùëîùëíùë† ùëñùëõ ùë†ùëùùêºùëöùëéùëîùëíùë†ùê∑ùëñùëüùëíùëêùë°ùëúùëüùë¶
2. For each feature ùëìùëñ of the query image, find the k-nearest features (k = spKNN) with respect to ùëìùëñ using the k-nearest-neighbor search algorithm (more later).
3. For each image ùëñùëöùëîùëñ in spImagesDirectory , keep track of the number of times a feature of ùëñùëöùëîùëñ is among the spKNN nearest features with respect to some feature ùëìùëñ in step 2.
4. Display the images in spImagesDirectory with the highest spNumOfSimilarImages ranks as calculated in step 3.
 *
 */
/*
// show results



return 0;
}



